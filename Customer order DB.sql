use practice;


-- Create Customers Table
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    phone_number VARCHAR(15),
    created_at DATE
);

-- Create Orders Table
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Create Products Table
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10, 2),
    stock_quantity INT
);

-- Create OrderDetails Table
CREATE TABLE OrderDetails (
    order_detail_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);



-- Insert data into Customers Table
INSERT INTO Customers (customer_id, first_name, last_name, email, phone_number, created_at) VALUES
(1, 'John', 'Doe', 'john.doe@example.com', '123-456-7890', '2023-01-15'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', '234-567-8901', '2023-02-20'),
(3, 'Emily', 'Davis', 'emily.davis@example.com', '345-678-9012', '2023-03-05'),
(4, 'Michael', 'Brown', 'michael.brown@example.com', '456-789-0123', '2023-04-10'),
(5, 'Sarah', 'Johnson', 'sarah.johnson@example.com', '567-890-1234', '2023-05-25'),
(6, 'Chris', 'Wilson', 'chris.wilson@example.com', '678-901-2345', '2023-06-15'),
(7, 'Amanda', 'Lee', 'amanda.lee@example.com', '789-012-3456', '2023-07-20'),
(8, 'David', 'Martinez', 'david.martinez@example.com', '890-123-4567', '2023-08-01'),
(9, 'Sophia', 'Garcia', 'sophia.garcia@example.com', '901-234-5678', '2023-08-09'),
(10, 'James', 'Miller', 'james.miller@example.com', '012-345-6789', '2023-08-09');

-- Insert data into Products Table
INSERT INTO Products (product_id, product_name, price, stock_quantity) VALUES
(1, 'Laptop', 999.99, 50),
(2, 'Smartphone', 599.99, 100),
(3, 'Tablet', 299.99, 150),
(4, 'Headphones', 49.99, 200),
(5, 'Smartwatch', 199.99, 75),
(6, 'Camera', 499.99, 80),
(7, 'Printer', 89.99, 120),
(8, 'Monitor', 149.99, 60),
(9, 'Keyboard', 29.99, 300),
(10, 'Mouse', 19.99, 350);

-- Insert data into Orders Table
INSERT INTO Orders (order_id, customer_id, order_date, total_amount) VALUES
(1, 1, '2023-01-16', 1049.98),
(2, 2, '2023-02-21', 599.99),
(3, 3, '2023-03-06', 799.98),
(4, 4, '2023-04-11', 299.99),
(5, 5, '2023-05-26', 199.99),
(6, 6, '2023-06-16', 1489.96),
(7, 7, '2023-07-21', 89.99),
(8, 8, '2023-08-02', 2199.96),
(9, 9, '2023-08-10', 79.98),
(10, 10, '2023-08-10', 109.98);

-- Insert data into OrderDetails Table
INSERT INTO OrderDetails (order_detail_id, order_id, product_id, quantity, price) VALUES
(1, 1, 1, 1, 999.99),
(2, 1, 4, 1, 49.99),
(3, 2, 2, 1, 599.99),
(4, 3, 1, 1, 999.99),
(5, 3, 3, 1, 299.99),
(6, 4, 3, 1, 299.99),
(7, 5, 5, 1, 199.99),
(8, 6, 1, 1, 999.99),
(9, 6, 8, 1, 149.99),
(10, 6, 6, 1, 499.99),
(11, 7, 7, 1, 89.99),
(12, 8, 2, 2, 1199.98),
(13, 8, 10, 2, 39.98),
(14, 9, 4, 2, 99.98),
(15, 10, 9, 2, 59.98);

-- Retrieve a list of all customers who have made more than 5 orders.
Select c.customer_id, c.first_name, c.last_name, COUNT(o.order_id) as Order_count from Customers 
as c LEFT JOIN orders as o ON c.customer_id = o.customer_id 
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING COUNT(o.order_id) = 1;

-- Find the total revenue generated by each customer.
Select  c.customer_id, c.first_name, c.last_name, SUM(o.total_amount) as Total_amount from Customers as c JOIN orders as o
ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;


-- Get a list of all products that have never been ordered.
SELECT p.product_id, p.product_name
FROM Products p
LEFT JOIN OrderDetails od ON p.product_id = od.product_id
WHERE od.order_id IS NULL;

-- Identify customers who haven't placed any orders in the last 6 months.
SELECT c.customer_id, c.first_name, c.last_name
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
AND o.order_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
WHERE o.order_id IS NULL;

